@using Library.DataAccess.Domain
@model Library.DataAccess.Domain.Posts
@{
    ViewData["TITLE"] = "Crear Publicación";
    List<PostsCategories> categories = ViewBag.categories as List<PostsCategories>;
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
<div class="row">
    <div class="col-md-12 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title text-center" style="font-family: 'Poppins', sans-serif; font-weight: 600;">Crear Publicación</h4>
                <form asp-action="Save" method="post" enctype="multipart/form-data" class="forms-sample">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    @if (ViewBag.error)
                    {
                        <div class="alert alert-danger text-center">
                            Hubo un problema al crear la Publicación
                        </div>
                    }
                    <div class="row">
                        <div class="mb-3 col-md-8">
                            <label asp-for="TITLE" class="form-label">Título</label>
                            <input asp-for="TITLE" class="form-control" value="" />
                            <span asp-validation-for="TITLE" class="text-danger">@ViewBag.titleError</span>
                        </div>
                        <div class="mb-3 col-md-4">
                            <label asp-for="CATEGORYID" class="form-label">Categoría</label>
                            <select asp-for="CATEGORYID" class="form-select">
                                <option value="0">Seleccionar</option>
                                @if (categories != null)
                                {
                                    @foreach (var item in categories)
                                    {
                                        <option value="@item.Id">@item.Name</option>
                                    }
                                }
                            </select>
                            <span asp-validation-for="CATEGORYID" class="text-danger">@ViewBag.categoryError</span>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label asp-for="CONTENT" class="form-label">Contenido</label>
                        <textarea asp-for="CONTENT" class="form-control markdown-editor" id="markdownEditor" rows="6"></textarea>
                        <span asp-validation-for="CONTENT" class="text-danger">@ViewBag.contentError</span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="IMAGES_PATH" class="form-label">Imágenes</label>
                        <input name="IMAGES_PATH" type="file" class="form-control" multiple id="imageInput" accept="image/*" />
                        <span asp-validation-for="IMAGES_PATH" class="text-danger"></span>
                        <div class="preview-container d-flex flex-wrap gap-2 mt-2" id="previewContainer"></div>
                    </div>
                    <div class="mb-3">
                        <label asp-for="DOCS_PATH" class="form-label">Documentos</label>
                        <input name="DOCS_PATH" type="file" class="form-control" multiple id="docInput" accept=".pdf,.doc,.docx,.txt,.xls,.xlsx,.ppt,.pptx" />
                        <span asp-validation-for="DOCS_PATH" class="text-danger"></span>
                        <div class="doc-preview-container d-flex flex-wrap gap-2 mt-2" id="docPreviewContainer"></div>
                    </div>
                    <div class="d-flex justify-content-center mt-4">
                        <button type="submit" class="btn btn-success me-2">
                            <i class="bi bi-floppy"></i> Guardar
                        </button>
                        <a asp-action="Manage" class="btn btn-secondary">
                            <i class="bi bi-reply-fill"></i> Regresar
                        </a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        new EasyMDE({
            element: document.getElementById("markdownEditor"),
            autoDownloadFontAwesome: false,
            placeholder: "Escribe el contenido en formato Markdown...",
            spellChecker: true,
            status: false,
            toolbar: [
                "bold", "italic", "heading", "|",
                "quote", "unordered-list", "ordered-list", "|",
                "link", "code", "|",
                "preview", "side-by-side", "fullscreen"
            ],
        });

        // Preview de imágenes con opción de cancelar
        const imageInput = document.getElementById('imageInput');
        const previewContainer = document.getElementById('previewContainer');

        imageInput.addEventListener('change', function () {
        const files = imageInput.files;
        if (files) {
            Array.from(files).forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = function (e) {
                        // Crear contenedor para cada imagen
                    const imageContainer = document.createElement('div');
                    imageContainer.style.position = 'relative';
                    imageContainer.style.display = 'inline-block';
                    imageContainer.style.marginRight = '15px';
                    imageContainer.style.marginBottom = '15px';
                    imageContainer.style.padding = '0'; // Sin padding en el contenedor
                    imageContainer.style.borderRadius = '10px'; // Mismo border-radius que la imagen

                    // Crear imagen
                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.alt = file.name;
                    img.style.width = '250px';
                    img.style.height = 'auto';
                    img.style.maxHeight = '250px';
                    img.style.objectFit = 'contain';
                    img.style.border = '1px solid #ccc';
                    img.style.borderRadius = '10px';
                    img.style.transition = 'opacity 0.5s ease-out';
                    img.style.margin = '5px';

                    // Crear botón de cancelar
                    const cancelButton = document.createElement('span');
                    cancelButton.innerHTML = '&times;';
                    cancelButton.style.position = 'absolute';
                    cancelButton.style.top = '10px'; 
                    cancelButton.style.right = '10px'; 
                    cancelButton.style.background = 'rgba(255, 255, 255, 0.8)';
                    cancelButton.style.borderRadius = '50%';
                    cancelButton.style.width = '25px';
                    cancelButton.style.height = '25px';
                    cancelButton.style.display = 'none';
                    cancelButton.style.justifyContent = 'center';
                    cancelButton.style.alignItems = 'center';
                    cancelButton.style.cursor = 'pointer';
                    cancelButton.style.fontWeight = 'bold';
                    cancelButton.style.color = '#dc3545';
                    cancelButton.style.border = '1px solid #dc3545';
                    cancelButton.style.fontSize = '18px'; 


                    // Mostrar/Ocultar botón de cancelar al pasar el cursor
                    imageContainer.addEventListener('mouseenter', function() {
                        cancelButton.style.display = 'flex';
                    });
                    imageContainer.addEventListener('mouseleave', function() {
                        cancelButton.style.display = 'none';
                    });

                    // Función para cancelar la imagen
                    cancelButton.addEventListener('click', function(e) {
                        e.stopPropagation();
                        img.style.opacity = '0';
                        setTimeout(function() {
                            imageContainer.remove();
                            // Remover el archivo del input file
                            const dataTransfer = new DataTransfer();
                            const { files } = imageInput;
                            const newFiles = Array.from(files).filter((_, i) => i !== index);
                            newFiles.forEach(file => dataTransfer.items.add(file));
                            imageInput.files = dataTransfer.files;
                        }, 500);
                    });

                    // Agregar elementos al contenedor
                    imageContainer.appendChild(img);
                    imageContainer.appendChild(cancelButton);
                    previewContainer.appendChild(imageContainer);
                };
                reader.readAsDataURL(file);
            });
            }
        });

            // Preview de documentos
        const docInput = document.getElementById('docInput');
        const docPreviewContainer = document.getElementById('docPreviewContainer');
        docInput.addEventListener('change', function () {
            docPreviewContainer.innerHTML = '';
            Array.from(docInput.files).forEach((file, index) => {
                // Crear contenedor para cada documento
                const docContainer = document.createElement('div');
                docContainer.style.position = 'relative';
                docContainer.style.display = 'flex';
                docContainer.style.flexDirection = 'column';
                docContainer.style.padding = '10px';
                docContainer.style.border = '1px solid #dee2e6';
                docContainer.style.borderRadius = '5px';
                docContainer.style.backgroundColor = '#fff';
                docContainer.style.marginBottom = '10px';
                docContainer.style.marginRight = '10px';

                // Crear icono del documento
                const fileIcon = document.createElement('i');
                fileIcon.className = file.type === "application/pdf" ? 'bi bi-file-earmark-pdf' : 'bi bi-file-earmark';
                fileIcon.style.fontSize = '24px';
                fileIcon.style.marginBottom = '5px';
                fileIcon.style.color = file.type === "application/pdf" ? 'red' : '#007bff';

                // Crear nombre del documento
                const fileName = document.createElement('span');
                fileName.textContent = file.name;
                fileName.style.fontWeight = 'bold';
                fileName.style.marginBottom = '5px';

                // Crear botón de cancelar (X)
                const cancelButton = document.createElement('span');
                cancelButton.innerHTML = '&times;';
                cancelButton.style.position = 'absolute';
                cancelButton.style.top = '5px';
                cancelButton.style.right = '5px';
                cancelButton.style.background = 'rgba(255, 255, 255, 0.8)';
                cancelButton.style.borderRadius = '50%';
                cancelButton.style.width = '22px';
                cancelButton.style.height = '22px';
                cancelButton.style.display = 'none';
                cancelButton.style.justifyContent = 'center';
                cancelButton.style.alignItems = 'center';
                cancelButton.style.cursor = 'pointer';
                cancelButton.style.fontWeight = 'bold';
                cancelButton.style.color = '#dc3545';
                cancelButton.style.border = '1px solid #dc3545';
                cancelButton.style.fontSize = '16px';

                // Mostrar/Ocultar botón de cancelar al pasar el cursor
                docContainer.addEventListener('mouseenter', function() {
                    cancelButton.style.display = 'flex';
                });
                docContainer.addEventListener('mouseleave', function() {
                    cancelButton.style.display = 'none';
                });

                // Función para cancelar el documento
                cancelButton.addEventListener('click', function(e) {
                    e.stopPropagation();
                    docContainer.style.opacity = '0';
                    setTimeout(function() {
                        docContainer.remove();
                        // Remover el archivo del input file
                        const dataTransfer = new DataTransfer();
                        const { files } = docInput;
                        const newFiles = Array.from(files).filter((_, i) => i !== index);
                        newFiles.forEach(file => dataTransfer.items.add(file));
                        docInput.files = dataTransfer.files;
                    }, 300);
                });

                // Agregar elementos al contenedor
                docContainer.appendChild(fileIcon);
                docContainer.appendChild(fileName);
                docContainer.appendChild(cancelButton);
                docPreviewContainer.appendChild(docContainer);
            });
        });

    });
</script>
<!-- SweetAlert -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Script para validación del formulario
        const form = document.querySelector("form.forms-sample");
        form.addEventListener("submit", function (e) {
            e.preventDefault();
            const title = document.querySelector("input[name='TITLE']").value.trim();
            const category = document.querySelector("select[name='CATEGORYID']").value;
            const content = document.querySelector("textarea[name='CONTENT']").value.trim();
            let errors = [];
            if (title === "") {
                errors.push("El título es requerido.");
            } else if (title.length > 250) {
                errors.push("El título no puede superar los 250 caracteres.");
            }
            if (category === "0") {
                errors.push("Debe seleccionar una categoría.");
            }
            if (content === "") {
                errors.push("El contenido es requerido.");
            } else if (content.length > 3000) {
                errors.push("El contenido no puede superar los 3000 caracteres.");
            }
            if (errors.length > 0) {
                Swal.fire({
                    icon: 'error',
                    title: 'Validación',
                    html: errors.join("<br>"),
                    confirmButtonText: 'Entendido',
                    confirmButtonColor: '#d33'
                });
            } else {
                form.submit();
            }
        });
    });
</script>